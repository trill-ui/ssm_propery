<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
     	http://www.springframework.org/schema/aop 
     	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc 
     	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
    <!-- 启动AOP AspectJ注解自动代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
    <!-- spring自动去扫描base-pack下面或者子包下面的java文件管理Service实现类-->
	<context:component-scan base-package="com.learn" />

	<!--<context:annotation-config />-->
    <!--开放静态资源-->
	<mvc:default-servlet-handler />

    <!--mvc的注解驱动  替换手动配置处理映射器，由底层实现-->
	<!-- Spring来扫描指定包下的类，并注册被@component，@Controller，@Service,@Repository等注解标记的组件 -->
	<!--当我们需要controller返回一个map的json对象时，可以设定<mvc:annotation-driven />，
同时设定<mvc:message-converters> 标签，设定字符集和json处理类，-->
    <!--解决返回json乱码-->
    <mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
		<!-- 避免IE执行AJAX时，返回JSON出现下载文件 -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <!--过滤空指针 是否输出值为null的字段,默认为false-->
                        <value>WriteMapNullValue</value>
                        <!--输出key时是否使用双引号,默认为true-->
                        <value>QuoteFieldNames</value>
                        <!--全局修改日期格式,yyyy-MM-dd 默认为false。-->
                        <value>WriteDateUseDateFormat</value>
						<!-- 禁用fastjson循环引用检测 -->
						<value>DisableCircularReferenceDetect</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
	</mvc:annotation-driven>


	<!-- 配置SpringMVC的视图解析器 -->
    <!--在java领域，表现层技术主要有三种：jsp、freemarker、velocity。-->
    <!--配置多个视图解析器需要指定调用视图解析器的顺序order，springmvc不晓得调用顺序-->
    <!--其中视图优先级按照属性中的order进行排序，值越小，优先级越高-->
	<!-- Velocity视图解析器    默认视图  -->
    <!--在页面中使用${rc.contextPath} 就可获得contextPath。注意，这里的rc对应的是org.springframework.web.servlet.support.RequestContext类的实例。-->
	<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="contentType" value="text/html;charset=UTF-8" />
        <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑-->
		<property name="viewNames" value="*.html" />
        <property name="suffix" value=""/>
        <property name="dateToolAttribute" value="date" />
        <property name="numberToolAttribute" value="number" /> 
        <property name="toolboxConfigLocation" value="/WEB-INF/velocity-toolbox.xml" />
        <property name="requestContextAttribute" value="rc"/>
        <property name="order" value="0"/>
	</bean>
	<!--模板文件需要存放在配置 *Configurer-->
	<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/page/" />
        <property name="velocityProperties">
          <props>
            <prop key="input.encoding">UTF-8</prop>
            <prop key="output.encoding">UTF-8</prop>
            <prop key="contentType">text/html;charset=UTF-8</prop>
          </props>
        </property>
	</bean>
	
	<!-- JSP视图解析器  -->
    <bean id="viewResolverJsp" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/page/"/>
        <!--配置jstl的视图解析-->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="viewNames" value="*.jsp" />
        <property name="suffix" value=""/>
        <property name="order" value="1"/>
    </bean>
    
    <!-- FreeMarker视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
	    <property name="contentType" value="text/html; charset=utf-8"/>
	    <property name="cache" value="false"/>
	    <property name="viewNames" value="*.ftl" />
        <property name="suffix" value=""/>
        <property name="order" value="2"/>
	</bean>

    <!-- freeMarker配置-->
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <!--指定模版路径-->
	    <property name="templateLoaderPath" value="/WEB-INF/page/"/>
	</bean>

	<!--上传文件解析器-->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="1000000000" />
	</bean>
	
	<!-- Kaptcha验证码生成器 -->
	<bean name="producer" class="com.google.code.kaptcha.impl.DefaultKaptcha" scope="singleton">
	    <property name="config">
	        <bean class="com.google.code.kaptcha.util.Config">
	            <constructor-arg>
	                <props>
                        <!--图片边框-->
	                    <prop key="kaptcha.border">no</prop>
                        <!--验证码字体颜色-->
	                    <prop key="kaptcha.textproducer.font.color">black</prop>
                        <!--验证码文字间距-->
	                    <prop key="kaptcha.textproducer.char.space">5</prop>
	                </props>
	            </constructor-arg>
	        </bean>
	    </property>
	</bean>
	
</beans>